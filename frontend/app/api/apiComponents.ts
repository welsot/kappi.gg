/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type ApiTokenRefreshError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ProblemDetails;
    }
  | {
      status: 401;
      payload: Schemas.ErrorResponse;
    }
>;

export type ApiTokenRefreshVariables = {
  body: Schemas.TokenRefreshDto;
};

export const apiTokenRefresh = (
  variables: ApiTokenRefreshVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ApiTokenResponse,
    ApiTokenRefreshError,
    Schemas.TokenRefreshDto,
    {},
    {},
    {}
  >({ url: "/api/token/refresh", method: "post", ...variables, signal });

export type ApiGetCurrentUserError = Fetcher.ErrorWrapper<undefined>;

export const apiGetCurrentUser = (signal?: AbortSignal) =>
  apiFetch<
    Schemas.UserInfoResponse,
    ApiGetCurrentUserError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/users/me", method: "get", signal });

export type ApiUsersLoginError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ProblemDetails;
    }
  | {
      status: 404;
      payload: Schemas.ErrorResponse;
    }
>;

export type ApiUsersLoginVariables = {
  body: Schemas.UserLoginDto;
};

export const apiUsersLogin = (
  variables: ApiUsersLoginVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ApiTokenResponse,
    ApiUsersLoginError,
    Schemas.UserLoginDto,
    {},
    {},
    {}
  >({ url: "/api/users/login", method: "post", ...variables, signal });

export type ApiUsersLogoutError = Fetcher.ErrorWrapper<{
  status: 401;
  payload: Schemas.ProblemDetails;
}>;

export const apiUsersLogout = (signal?: AbortSignal) =>
  apiFetch<Schemas.SuccessResponse, ApiUsersLogoutError, undefined, {}, {}, {}>(
    { url: "/api/users/logout", method: "post", signal },
  );

export type ApiUsersRegisterError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ProblemDetails;
    }
  | {
      status: 409;
      payload: Schemas.ErrorResponse;
    }
>;

export type ApiUsersRegisterVariables = {
  body: Schemas.UserRegistrationDto;
};

export const apiUsersRegister = (
  variables: ApiUsersRegisterVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.GuidResponse,
    ApiUsersRegisterError,
    Schemas.UserRegistrationDto,
    {},
    {},
    {}
  >({ url: "/api/users/register", method: "post", ...variables, signal });

export type CreateAnonymousGalleryError = Fetcher.ErrorWrapper<{
  status: 500;
  payload: Schemas.ErrorResponse;
}>;

export const createAnonymousGallery = (signal?: AbortSignal) =>
  apiFetch<
    Schemas.CreateAnonymousGalleryResponse,
    CreateAnonymousGalleryError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/galleries/anonymous", method: "post", signal });

export type AnonymousGalleryRequestUploadUrlPathParams = {
  accessKey: string;
};

export type AnonymousGalleryRequestUploadUrlError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ErrorResponse;
    }
>;

export type AnonymousGalleryRequestUploadUrlVariables = {
  body: Schemas.RequestUploadUrlDto;
  pathParams: AnonymousGalleryRequestUploadUrlPathParams;
};

export const anonymousGalleryRequestUploadUrl = (
  variables: AnonymousGalleryRequestUploadUrlVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UploadUrlResponse,
    AnonymousGalleryRequestUploadUrlError,
    Schemas.RequestUploadUrlDto,
    {},
    {},
    AnonymousGalleryRequestUploadUrlPathParams
  >({
    url: "/api/galleries/anonymous/{accessKey}/media/request-upload",
    method: "post",
    ...variables,
    signal,
  });

export type AnonymousGalleryConfirmUploadPathParams = {
  accessKey: string;
};

export type AnonymousGalleryConfirmUploadError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ErrorResponse;
    }
>;

export type AnonymousGalleryConfirmUploadVariables = {
  body: Schemas.ConfirmUploadDto;
  pathParams: AnonymousGalleryConfirmUploadPathParams;
};

export const anonymousGalleryConfirmUpload = (
  variables: AnonymousGalleryConfirmUploadVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SuccessResponse,
    AnonymousGalleryConfirmUploadError,
    Schemas.ConfirmUploadDto,
    {},
    {},
    AnonymousGalleryConfirmUploadPathParams
  >({
    url: "/api/galleries/anonymous/{accessKey}/media/confirm-upload",
    method: "post",
    ...variables,
    signal,
  });

export type GetAnonymousGalleryByShortCodePathParams = {
  shortCode: string;
};

export type GetAnonymousGalleryByShortCodeError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ErrorResponse;
    }
>;

export type GetAnonymousGalleryByShortCodeVariables = {
  pathParams: GetAnonymousGalleryByShortCodePathParams;
};

export const getAnonymousGalleryByShortCode = (
  variables: GetAnonymousGalleryByShortCodeVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AnonymousGalleryDto,
    GetAnonymousGalleryByShortCodeError,
    undefined,
    {},
    {},
    GetAnonymousGalleryByShortCodePathParams
  >({
    url: "/api/galleries/anonymous/by-short-code/{shortCode}",
    method: "get",
    ...variables,
    signal,
  });

export type DeleteAnonymousGalleryMediaPathParams = {
  accessKey: string;
  /**
   * @format uuid
   */
  mediaId: string;
};

export type DeleteAnonymousGalleryMediaError = Fetcher.ErrorWrapper<
  | {
      status: 404;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ErrorResponse;
    }
>;

export type DeleteAnonymousGalleryMediaVariables = {
  pathParams: DeleteAnonymousGalleryMediaPathParams;
};

export const deleteAnonymousGalleryMedia = (
  variables: DeleteAnonymousGalleryMediaVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SuccessResponse,
    DeleteAnonymousGalleryMediaError,
    undefined,
    {},
    {},
    DeleteAnonymousGalleryMediaPathParams
  >({
    url: "/api/galleries/anonymous/{accessKey}/media/{mediaId}",
    method: "delete",
    ...variables,
    signal,
  });

export type CreateGalleryError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ErrorResponse;
    }
>;

export type CreateGalleryVariables = {
  body: Schemas.CreateGalleryDto;
};

export const createGallery = (
  variables: CreateGalleryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.GalleryDto,
    CreateGalleryError,
    Schemas.CreateGalleryDto,
    {},
    {},
    {}
  >({ url: "/api/galleries", method: "post", ...variables, signal });

export type GetMyGalleriesError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ErrorResponse;
    }
>;

export const getMyGalleries = (signal?: AbortSignal) =>
  apiFetch<
    Schemas.GalleryListResponse,
    GetMyGalleriesError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/galleries", method: "get", signal });

export type GetGalleryPathParams = {
  /**
   * @format uuid
   */
  id: string;
};

export type GetGalleryError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 404;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ErrorResponse;
    }
>;

export type GetGalleryVariables = {
  pathParams: GetGalleryPathParams;
};

export const getGallery = (
  variables: GetGalleryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.GalleryDto,
    GetGalleryError,
    undefined,
    {},
    {},
    GetGalleryPathParams
  >({ url: "/api/galleries/{id}", method: "get", ...variables, signal });

export type UpdateGalleryPathParams = {
  /**
   * @format uuid
   */
  id: string;
};

export type UpdateGalleryError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 404;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ErrorResponse;
    }
>;

export type UpdateGalleryVariables = {
  body: Schemas.UpdateGalleryDto;
  pathParams: UpdateGalleryPathParams;
};

export const updateGallery = (
  variables: UpdateGalleryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.GalleryDto,
    UpdateGalleryError,
    Schemas.UpdateGalleryDto,
    {},
    {},
    UpdateGalleryPathParams
  >({ url: "/api/galleries/{id}", method: "put", ...variables, signal });

export type DeleteGalleryPathParams = {
  /**
   * @format uuid
   */
  id: string;
};

export type DeleteGalleryError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 404;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ErrorResponse;
    }
>;

export type DeleteGalleryVariables = {
  pathParams: DeleteGalleryPathParams;
};

export const deleteGallery = (
  variables: DeleteGalleryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SuccessResponse,
    DeleteGalleryError,
    undefined,
    {},
    {},
    DeleteGalleryPathParams
  >({ url: "/api/galleries/{id}", method: "delete", ...variables, signal });

export type GalleryRequestUploadUrlPathParams = {
  /**
   * @format uuid
   */
  id: string;
};

export type GalleryRequestUploadUrlError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 404;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ErrorResponse;
    }
>;

export type GalleryRequestUploadUrlVariables = {
  body: Schemas.RequestUploadUrlDto;
  pathParams: GalleryRequestUploadUrlPathParams;
};

export const galleryRequestUploadUrl = (
  variables: GalleryRequestUploadUrlVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UploadUrlResponse,
    GalleryRequestUploadUrlError,
    Schemas.RequestUploadUrlDto,
    {},
    {},
    GalleryRequestUploadUrlPathParams
  >({
    url: "/api/galleries/{id}/media/request-upload",
    method: "post",
    ...variables,
    signal,
  });

export type GalleryConfirmUploadPathParams = {
  /**
   * @format uuid
   */
  id: string;
};

export type GalleryConfirmUploadError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 404;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ErrorResponse;
    }
>;

export type GalleryConfirmUploadVariables = {
  body: Schemas.ConfirmUploadDto;
  pathParams: GalleryConfirmUploadPathParams;
};

export const galleryConfirmUpload = (
  variables: GalleryConfirmUploadVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SuccessResponse,
    GalleryConfirmUploadError,
    Schemas.ConfirmUploadDto,
    {},
    {},
    GalleryConfirmUploadPathParams
  >({
    url: "/api/galleries/{id}/media/confirm-upload",
    method: "post",
    ...variables,
    signal,
  });

export type DeleteGalleryMediaPathParams = {
  /**
   * @format uuid
   */
  id: string;
  /**
   * @format uuid
   */
  mediaId: string;
};

export type DeleteGalleryMediaError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 404;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ErrorResponse;
    }
>;

export type DeleteGalleryMediaVariables = {
  pathParams: DeleteGalleryMediaPathParams;
};

export const deleteGalleryMedia = (
  variables: DeleteGalleryMediaVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SuccessResponse,
    DeleteGalleryMediaError,
    undefined,
    {},
    {},
    DeleteGalleryMediaPathParams
  >({
    url: "/api/galleries/{id}/media/{mediaId}",
    method: "delete",
    ...variables,
    signal,
  });

export type GetGalleryByShortCodePathParams = {
  shortCode: string;
};

export type GetGalleryByShortCodeError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 404;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ErrorResponse;
    }
>;

export type GetGalleryByShortCodeVariables = {
  pathParams: GetGalleryByShortCodePathParams;
};

export const getGalleryByShortCode = (
  variables: GetGalleryByShortCodeVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.GalleryDto,
    GetGalleryByShortCodeError,
    undefined,
    {},
    {},
    GetGalleryByShortCodePathParams
  >({
    url: "/api/galleries/by-short-code/{shortCode}",
    method: "get",
    ...variables,
    signal,
  });

export type VerifyGalleryPasswordPathParams = {
  shortCode: string;
};

export type VerifyGalleryPasswordError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 404;
      payload: Schemas.ErrorResponse;
    }
  | {
      status: 500;
      payload: Schemas.ErrorResponse;
    }
>;

export type VerifyGalleryPasswordVariables = {
  body: Schemas.VerifyGalleryPasswordDto;
  pathParams: VerifyGalleryPasswordPathParams;
};

export const verifyGalleryPassword = (
  variables: VerifyGalleryPasswordVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.GalleryDto,
    VerifyGalleryPasswordError,
    Schemas.VerifyGalleryPasswordDto,
    {},
    {},
    VerifyGalleryPasswordPathParams
  >({
    url: "/api/galleries/by-short-code/{shortCode}/verify-password",
    method: "post",
    ...variables,
    signal,
  });

export const operationsByTag = {
  tokenRefresh: { apiTokenRefresh },
  userInfo: { apiGetCurrentUser },
  userLogin: { apiUsersLogin },
  userLogout: { apiUsersLogout },
  userRegistration: { apiUsersRegister },
  anonymousGallery: {
    createAnonymousGallery,
    anonymousGalleryRequestUploadUrl,
    anonymousGalleryConfirmUpload,
    getAnonymousGalleryByShortCode,
    deleteAnonymousGalleryMedia,
  },
  gallery: {
    createGallery,
    getMyGalleries,
    getGallery,
    updateGallery,
    deleteGallery,
    galleryRequestUploadUrl,
    galleryConfirmUpload,
    deleteGalleryMedia,
    getGalleryByShortCode,
    verifyGalleryPassword,
  },
};
